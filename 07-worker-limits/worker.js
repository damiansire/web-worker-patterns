// worker.js - Worker simple para testing de l√≠mites

console.log('üîß Worker iniciado');

// Escuchar mensajes del hilo principal
self.onmessage = function(e) {
    const { action, workerId } = e.data;
    
    if (action === 'init') {
        console.log(`Worker #${workerId} inicializado`);
        
        // Enviar confirmaci√≥n
        self.postMessage({
            message: `Inicializado correctamente`,
            workerId: workerId
        });
        
        // Simular trabajo peri√≥dico (opcional)
        // Esto ayuda a mantener el worker "vivo" y visible en las herramientas de desarrollo
        let counter = 0;
        const interval = setInterval(() => {
            counter++;
            
            // Enviar heartbeat cada 5 segundos
            if (counter % 50 === 0) {
                self.postMessage({
                    message: `Heartbeat - Sigo activo (${counter / 10}s)`,
                    workerId: workerId
                });
            }
        }, 100);
        
        // Limpiar intervalo si el worker es terminado
        self.addEventListener('error', () => {
            clearInterval(interval);
        });
    }
};

// Manejo de errores
self.onerror = function(error) {
    console.error('‚ùå Error en worker:', error);
};

// NOTAS SOBRE L√çMITES DE WORKERS:
//
// 1. L√çMITES DEL NAVEGADOR:
//    - Chrome/Edge: ~20-50 workers (depende de n√∫cleos CPU y memoria)
//    - Firefox: ~20-30 workers
//    - Safari: ~10-20 workers
//    - Los l√≠mites exactos var√≠an seg√∫n la configuraci√≥n del sistema
//
// 2. FACTORES QUE AFECTAN EL L√çMITE:
//    - N√∫mero de n√∫cleos CPU (navigator.hardwareConcurrency)
//    - Memoria RAM disponible
//    - Otros procesos del navegador
//    - Configuraci√≥n del SO
//
// 3. QU√â SUCEDE AL EXCEDER EL L√çMITE:
//    - El constructor Worker() puede lanzar una excepci√≥n
//    - Puede fallar silenciosamente (el worker no se crea)
//    - El navegador puede volverse lento o no responsivo
//    - Puede afectar otras pesta√±as del navegador
//
// 4. MEJORES PR√ÅCTICAS:
//    - Usa un "pool" de workers reutilizables
//    - L√≠mite recomendado: navigator.hardwareConcurrency * 2
//    - Siempre termina workers que no necesitas
//    - Implementa monitoreo y limpieza autom√°tica
//    - Para tareas paralelas masivas, considera usar un worker que procese
//      tareas en cola en lugar de crear un worker por tarea
//
// 5. PATR√ìN WORKER POOL:
//    En lugar de crear muchos workers, crea un n√∫mero fijo (ej: 4-8)
//    y reutil√≠zalos para procesar m√∫ltiples tareas en cola.

