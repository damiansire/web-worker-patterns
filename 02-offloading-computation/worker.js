// worker.js - C√°lculo de n√∫meros primos en un hilo separado

console.log('üîß Worker de c√°lculo de primos iniciado');

// Funci√≥n para calcular n√∫meros primos
function calculatePrimes(max) {
    const primes = [];
    
    for (let i = 2; primes.length < max; i++) {
        let isPrime = true;
        
        // Comprobar si i es primo
        for (let j = 2; j <= Math.sqrt(i); j++) {
            if (i % j === 0) {
                isPrime = false;
                break;
            }
        }
        
        if (isPrime) {
            primes.push(i);
        }
    }
    
    return primes;
}

// Escuchar mensajes del hilo principal
self.onmessage = function(e) {
    const { count } = e.data;
    
    console.log(`üî¢ Worker iniciando c√°lculo de ${count} n√∫meros primos...`);
    
    // Realizar el c√°lculo pesado
    // Como esto se ejecuta en un hilo separado, no bloquear√° la UI
    const primes = calculatePrimes(count);
    
    console.log(`‚úÖ Worker complet√≥ el c√°lculo de ${primes.length} n√∫meros primos`);
    console.log(`El primo m√°s grande es: ${primes[primes.length - 1]}`);
    
    // Enviar el resultado de vuelta al hilo principal
    self.postMessage({
        primes: primes,
        count: primes.length
    });
};

// Nota importante: Este c√°lculo es intensivo, pero al ejecutarse en un worker,
// no afecta la responsividad de la interfaz de usuario. El hilo principal
// sigue libre para actualizar el contador, procesar animaciones y responder
// a las interacciones del usuario.

